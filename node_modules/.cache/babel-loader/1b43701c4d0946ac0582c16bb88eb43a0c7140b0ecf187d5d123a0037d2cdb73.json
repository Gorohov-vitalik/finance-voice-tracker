{"ast":null,"code":"export function register() {\n  if ('serviceWorker' in navigator) {\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n      navigator.serviceWorker.register(swUrl).then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                console.log('Новая версия доступна!');\n              } else {\n                console.log('Приложение готово к работе оффлайн!');\n              }\n            }\n          };\n        };\n      }).catch(error => {\n        console.error('Ошибка при регистрации Service Worker:', error);\n      });\n    });\n  }\n}\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    }).catch(error => {\n      console.error('Ошибка при отмене регистрации Service Worker:', error);\n    });\n  }\n}","map":{"version":3,"names":["register","navigator","window","addEventListener","swUrl","process","env","PUBLIC_URL","serviceWorker","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","unregister","ready"],"sources":["C:/Users/TNTNK/OneDrive/Рабочий стол/app/src/serviceWorkerRegistration.js"],"sourcesContent":["export function register() {\r\n  if ('serviceWorker' in navigator) {\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n          registration.onupdatefound = () => {\r\n            const installingWorker = registration.installing;\r\n            if (installingWorker == null) {\r\n              return;\r\n            }\r\n            installingWorker.onstatechange = () => {\r\n              if (installingWorker.state === 'installed') {\r\n                if (navigator.serviceWorker.controller) {\r\n                  console.log('Новая версия доступна!');\r\n                } else {\r\n                  console.log('Приложение готово к работе оффлайн!');\r\n                }\r\n              }\r\n            };\r\n          };\r\n        })\r\n        .catch(error => {\r\n          console.error('Ошибка при регистрации Service Worker:', error);\r\n        });\r\n    });\r\n  }\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error('Ошибка при отмене регистрации Service Worker:', error);\r\n      });\r\n  }\r\n} "],"mappings":"AAAA,OAAO,SAASA,QAAQA,CAAA,EAAG;EACzB,IAAI,eAAe,IAAIC,SAAS,EAAE;IAChCC,MAAM,CAACC,gBAAgB,CAAC,MAAM,EAAE,MAAM;MACpC,MAAMC,KAAK,GAAG,GAAGC,OAAO,CAACC,GAAG,CAACC,UAAU,oBAAoB;MAE3DN,SAAS,CAACO,aAAa,CACpBR,QAAQ,CAACI,KAAK,CAAC,CACfK,IAAI,CAACC,YAAY,IAAI;QACpBA,YAAY,CAACC,aAAa,GAAG,MAAM;UACjC,MAAMC,gBAAgB,GAAGF,YAAY,CAACG,UAAU;UAChD,IAAID,gBAAgB,IAAI,IAAI,EAAE;YAC5B;UACF;UACAA,gBAAgB,CAACE,aAAa,GAAG,MAAM;YACrC,IAAIF,gBAAgB,CAACG,KAAK,KAAK,WAAW,EAAE;cAC1C,IAAId,SAAS,CAACO,aAAa,CAACQ,UAAU,EAAE;gBACtCC,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;cACvC,CAAC,MAAM;gBACLD,OAAO,CAACC,GAAG,CAAC,qCAAqC,CAAC;cACpD;YACF;UACF,CAAC;QACH,CAAC;MACH,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAI;QACdH,OAAO,CAACG,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;MAChE,CAAC,CAAC;IACN,CAAC,CAAC;EACJ;AACF;AAEA,OAAO,SAASC,UAAUA,CAAA,EAAG;EAC3B,IAAI,eAAe,IAAIpB,SAAS,EAAE;IAChCA,SAAS,CAACO,aAAa,CAACc,KAAK,CAC1Bb,IAAI,CAACC,YAAY,IAAI;MACpBA,YAAY,CAACW,UAAU,CAAC,CAAC;IAC3B,CAAC,CAAC,CACDF,KAAK,CAACC,KAAK,IAAI;MACdH,OAAO,CAACG,KAAK,CAAC,+CAA+C,EAAEA,KAAK,CAAC;IACvE,CAAC,CAAC;EACN;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}